
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programDIVIDE ELSE EQ EQUALS GE GT ID IF LBRACE LE LPAREN LT MINUS NE NUMBER PLUS PRINT RBRACE RPAREN SEMICOLON TIMES VAR WHILEprogram : statement_liststatement_list : statement_list statement\n| statementstatement : VAR ID EQUALS expression SEMICOLONstatement : ID EQUALS expression SEMICOLONstatement : PRINT LPAREN expression RPAREN SEMICOLONstatement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEstatement : IF LPAREN expression RPAREN LBRACE statement_list RBRACEstatement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression GT expression\n| expression LT expression\n| expression GE expression\n| expression LE expression\n| expression EQ expression\n| expression NE expressionexpression : NUMBERexpression : ID'
    
_lr_action_items = {'VAR':([0,2,3,9,23,37,48,49,50,51,52,53,54,56,57,58,],[4,4,-3,-2,-5,-4,-6,4,4,4,4,-7,-8,4,4,-9,]),'ID':([0,2,3,4,9,11,12,13,14,15,23,24,25,26,27,28,29,30,31,32,33,37,48,49,50,51,52,53,54,56,57,58,],[5,5,-3,10,-2,16,16,16,16,16,-5,16,16,16,16,16,16,16,16,16,16,-4,-6,5,5,5,5,-7,-8,5,5,-9,]),'PRINT':([0,2,3,9,23,37,48,49,50,51,52,53,54,56,57,58,],[6,6,-3,-2,-5,-4,-6,6,6,6,6,-7,-8,6,6,-9,]),'WHILE':([0,2,3,9,23,37,48,49,50,51,52,53,54,56,57,58,],[7,7,-3,-2,-5,-4,-6,7,7,7,7,-7,-8,7,7,-9,]),'IF':([0,2,3,9,23,37,48,49,50,51,52,53,54,56,57,58,],[8,8,-3,-2,-5,-4,-6,8,8,8,8,-7,-8,8,8,-9,]),'$end':([1,2,3,9,23,37,48,53,54,58,],[0,-1,-3,-2,-5,-4,-6,-7,-8,-9,]),'RBRACE':([3,9,23,37,48,51,52,53,54,57,58,],[-3,-2,-5,-4,-6,53,54,-7,-8,58,-9,]),'EQUALS':([5,10,],[11,15,]),'LPAREN':([6,7,8,],[12,13,14,]),'NUMBER':([11,12,13,14,15,24,25,26,27,28,29,30,31,32,33,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'SEMICOLON':([16,17,18,22,34,38,39,40,41,42,43,44,45,46,47,],[-21,23,-20,37,48,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,]),'PLUS':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,24,-20,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'MINUS':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,25,-20,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'TIMES':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,26,-20,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'DIVIDE':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,27,-20,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'GT':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,28,-20,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'LT':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,29,-20,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'GE':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,30,-20,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'LE':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,31,-20,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'EQ':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,32,-20,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'NE':([16,17,18,19,20,21,22,38,39,40,41,42,43,44,45,46,47,],[-21,33,-20,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'RPAREN':([16,18,19,20,21,38,39,40,41,42,43,44,45,46,47,],[-21,-20,34,35,36,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,]),'LBRACE':([35,36,55,],[49,50,56,]),'ELSE':([54,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,49,50,56,],[2,51,52,57,]),'statement':([0,2,49,50,51,52,56,57,],[3,9,3,3,9,9,3,9,]),'expression':([11,12,13,14,15,24,25,26,27,28,29,30,31,32,33,],[17,19,20,21,22,38,39,40,41,42,43,44,45,46,47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','my_parser.py',10),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','my_parser.py',14),
  ('statement_list -> statement','statement_list',1,'p_statement_list','my_parser.py',15),
  ('statement -> VAR ID EQUALS expression SEMICOLON','statement',5,'p_statement_var_decl','my_parser.py',22),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','my_parser.py',26),
  ('statement -> PRINT LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_print','my_parser.py',30),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','statement',7,'p_statement_while','my_parser.py',34),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','statement',7,'p_statement_if','my_parser.py',38),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','statement',11,'p_statement_if_else','my_parser.py',42),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','my_parser.py',46),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','my_parser.py',47),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','my_parser.py',48),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','my_parser.py',49),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','my_parser.py',50),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','my_parser.py',51),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','my_parser.py',52),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','my_parser.py',53),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','my_parser.py',54),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','my_parser.py',55),
  ('expression -> NUMBER','expression',1,'p_expression_number','my_parser.py',59),
  ('expression -> ID','expression',1,'p_expression_var','my_parser.py',63),
]
