
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programDIVIDE ELSE EQ EQUALS FOR GE GT ID IF LBRACE LE LPAREN LT MINUS NE NUMBER PLUS PRINT RBRACE RPAREN SEMICOLON TIMES VAR WHILEprogram : statement_liststatement_list : statement_list statement\n| statementstatement : VAR ID EQUALS expression SEMICOLONstatement_assignment : ID EQUALS expressionstatement : statement_assignment SEMICOLONstatement : PRINT LPAREN expression RPAREN SEMICOLONstatement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEstatement : IF LPAREN expression RPAREN LBRACE statement_list RBRACEstatement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEstatement : FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE statement_list RBRACEfor_init : VAR ID EQUALS expression\n| ID EQUALS expression\n| emptyfor_update : ID EQUALS expression\n| emptyempty :expression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression GT expression\n| expression LT expression\n| expression GE expression\n| expression LE expression\n| expression EQ expression\n| expression NE expressionexpression : NUMBERexpression : IDstatement : SEMICOLON'
    
_lr_action_items = {'VAR':([0,2,3,6,12,15,19,48,59,60,61,65,66,69,70,77,78,80,81,82,83,],[4,4,-3,-30,-2,-6,28,-4,-7,4,4,4,4,-8,-9,4,4,4,4,-10,-11,]),'PRINT':([0,2,3,6,12,15,48,59,60,61,65,66,69,70,77,78,80,81,82,83,],[8,8,-3,-30,-2,-6,-4,-7,8,8,8,8,-8,-9,8,8,8,8,-10,-11,]),'WHILE':([0,2,3,6,12,15,48,59,60,61,65,66,69,70,77,78,80,81,82,83,],[9,9,-3,-30,-2,-6,-4,-7,9,9,9,9,-8,-9,9,9,9,9,-10,-11,]),'IF':([0,2,3,6,12,15,48,59,60,61,65,66,69,70,77,78,80,81,82,83,],[10,10,-3,-30,-2,-6,-4,-7,10,10,10,10,-8,-9,10,10,10,10,-10,-11,]),'FOR':([0,2,3,6,12,15,48,59,60,61,65,66,69,70,77,78,80,81,82,83,],[11,11,-3,-30,-2,-6,-4,-7,11,11,11,11,-8,-9,11,11,11,11,-10,-11,]),'SEMICOLON':([0,2,3,6,7,12,15,19,21,22,23,27,30,31,42,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,77,78,80,81,82,83,],[6,6,-3,-30,15,-2,-6,-17,-29,-5,-28,45,-14,48,59,-4,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-7,6,6,67,-13,6,6,-12,-8,-9,6,6,6,6,-10,-11,]),'ID':([0,2,3,4,6,12,14,15,16,17,18,19,20,28,32,33,34,35,36,37,38,39,40,41,45,47,48,59,60,61,63,65,66,67,69,70,76,77,78,80,81,82,83,],[5,5,-3,13,-30,-2,21,-6,21,21,21,29,21,46,21,21,21,21,21,21,21,21,21,21,21,21,-4,-7,5,5,21,5,5,72,-8,-9,21,5,5,5,5,-10,-11,]),'$end':([1,2,3,6,12,15,48,59,69,70,82,83,],[0,-1,-3,-30,-2,-6,-4,-7,-8,-9,-10,-11,]),'RBRACE':([3,6,12,15,48,59,65,66,69,70,80,81,82,83,],[-3,-30,-2,-6,-4,-7,69,70,-8,-9,82,83,-10,-11,]),'EQUALS':([5,13,29,46,72,],[14,20,47,63,76,]),'LPAREN':([8,9,10,11,],[16,17,18,19,]),'NUMBER':([14,16,17,18,20,32,33,34,35,36,37,38,39,40,41,45,47,63,76,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'PLUS':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,32,-28,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'MINUS':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,33,-28,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'TIMES':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,34,-28,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'DIVIDE':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,35,-28,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'GT':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,36,-28,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'LT':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,37,-28,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'GE':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,38,-28,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'LE':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,39,-28,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'EQ':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,40,-28,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'NE':([21,22,23,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,],[-29,41,-28,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'RPAREN':([21,23,24,25,26,49,50,51,52,53,54,55,56,57,58,67,71,73,79,],[-29,-28,42,43,44,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-17,75,-16,-15,]),'LBRACE':([43,44,74,75,],[60,61,77,78,]),'ELSE':([70,],[74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,60,61,77,78,],[2,65,66,80,81,]),'statement':([0,2,60,61,65,66,77,78,80,81,],[3,12,3,3,12,12,3,3,12,12,]),'statement_assignment':([0,2,60,61,65,66,77,78,80,81,],[7,7,7,7,7,7,7,7,7,7,]),'expression':([14,16,17,18,20,32,33,34,35,36,37,38,39,40,41,45,47,63,76,],[22,24,25,26,31,49,50,51,52,53,54,55,56,57,58,62,64,68,79,]),'for_init':([19,],[27,]),'empty':([19,67,],[30,73,]),'for_update':([67,],[71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','my_parser.py',14),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','my_parser.py',19),
  ('statement_list -> statement','statement_list',1,'p_statement_list','my_parser.py',20),
  ('statement -> VAR ID EQUALS expression SEMICOLON','statement',5,'p_statement_var','my_parser.py',29),
  ('statement_assignment -> ID EQUALS expression','statement_assignment',3,'p_statement_assignment','my_parser.py',34),
  ('statement -> statement_assignment SEMICOLON','statement',2,'p_statement_assignment_stmt','my_parser.py',39),
  ('statement -> PRINT LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_print','my_parser.py',44),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','statement',7,'p_statement_while','my_parser.py',49),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','statement',7,'p_statement_if','my_parser.py',54),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','statement',11,'p_statement_if_else','my_parser.py',59),
  ('statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON for_update RPAREN LBRACE statement_list RBRACE','statement',11,'p_statement_for','my_parser.py',64),
  ('for_init -> VAR ID EQUALS expression','for_init',4,'p_for_init','my_parser.py',74),
  ('for_init -> ID EQUALS expression','for_init',3,'p_for_init','my_parser.py',75),
  ('for_init -> empty','for_init',1,'p_for_init','my_parser.py',76),
  ('for_update -> ID EQUALS expression','for_update',3,'p_for_update','my_parser.py',85),
  ('for_update -> empty','for_update',1,'p_for_update','my_parser.py',86),
  ('empty -> <empty>','empty',0,'p_empty','my_parser.py',93),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','my_parser.py',98),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','my_parser.py',99),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','my_parser.py',100),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','my_parser.py',101),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','my_parser.py',102),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','my_parser.py',103),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','my_parser.py',104),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','my_parser.py',105),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','my_parser.py',106),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','my_parser.py',107),
  ('expression -> NUMBER','expression',1,'p_expression_number','my_parser.py',112),
  ('expression -> ID','expression',1,'p_expression_var','my_parser.py',117),
  ('statement -> SEMICOLON','statement',1,'p_statement_empty','my_parser.py',123),
]
